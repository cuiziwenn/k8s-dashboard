apiVersion: v1
kind: Secret
metadata:
  name: k8s-ui-db
  namespace: apps
type: Opaque
stringData:
  # 修改为你的 MySQL 连接信息
  db-host: mysql-service.apps.svc.cluster.local  # MySQL 服务地址（格式：服务名.命名空间.svc.cluster.local）
  db-port: "3306"
  db-name: k8sui  # 数据库名（需要提前创建）
  db-user: k8sui  # 数据库用户
  db-password: Cuiziwen@123  # 数据库密码
---
apiVersion: v1
kind: Secret
metadata:
  name: k8s-ui-admin
  namespace: apps
type: Opaque
stringData:
  # 管理员登录信息
  admin-username: admin
  admin-email: c302894887@163.com
  admin-password: admin # 修改为你想要的密码
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-ui-init-db
  namespace: apps
data:
  init-db.sql: |
    -- 创建数据库（如果不存在）
    CREATE DATABASE IF NOT EXISTS k8sui CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    -- 创建用户（如果不存在）
    CREATE USER IF NOT EXISTS 'k8sui'@'%' IDENTIFIED BY 'Cuiziwen@123';
    
    -- 授权
    GRANT ALL PRIVILEGES ON k8sui.* TO 'k8sui'@'%';
    FLUSH PRIVILEGES;
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ui-sa
  namespace: apps
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ui-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ui-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ui-role
subjects:
- kind: ServiceAccount
  name: k8s-ui-sa
  namespace: apps
---
apiVersion: batch/v1
kind: Job
metadata:
  name: k8s-ui-db-init
  namespace: apps
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mysql-client
        image: mysql:8.3
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          echo "等待 MySQL 就绪..."
          until mysql -h$DB_HOST -P$DB_PORT -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT 1" > /dev/null 2>&1; do
            echo "MySQL 未就绪，等待中..."
            sleep 3
          done
          echo "MySQL 已就绪，开始初始化数据库..."
          mysql -h$DB_HOST -P$DB_PORT -uroot -p$MYSQL_ROOT_PASSWORD < /scripts/init-db.sql
          echo "数据库初始化完成！"
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-port
        - name: MYSQL_ROOT_PASSWORD
          value: "Cuiziwen@123"  # 修改为你的 MySQL root 密码
        volumeMounts:
        - name: init-script
          mountPath: /scripts
      volumes:
      - name: init-script
        configMap:
          name: k8s-ui-init-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-ui
  namespace: apps
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-ui
  template:
    metadata:
      labels:
        app: k8s-ui
    spec:
      serviceAccountName: k8s-ui-sa
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          echo "等待 MySQL 服务..."
          until nc -z $DB_HOST $DB_PORT; do
            echo "MySQL 未就绪，等待中..."
            sleep 2
          done
          echo "MySQL 已就绪！"
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-port
      containers:
      - name: k8s-ui
        image: registry.cn-hangzhou.aliyuncs.com/github_actions/k8s-ui:v1.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        # 数据库配置
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-port
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k8s-ui-db
              key: db-password
        # Django 配置
        - name: SECRET_KEY
          value: "django-insecure-change-this-to-random-string-in-production"
        - name: DEBUG
          value: "False"
        # 管理员账号配置
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: k8s-ui-admin
              key: admin-username
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: k8s-ui-admin
              key: admin-email
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k8s-ui-admin
              key: admin-password
        livenessProbe:
          httpGet:
            path: /login/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /login/
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-ui-svc
  namespace: apps
spec:
  selector:
    app: k8s-ui
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8s-ui-ingress
  namespace: apps 
  annotations:
    kubesphere.io/creator: admin
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /

spec:
  ingressClassName: ingress-secret
  tls:
    - hosts:
        - certd.svss.cn
      secretName: ingress-secret
  rules:
  - host: k8s.svss.cn
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: k8s-ui-svc
            port:
              number: 80
